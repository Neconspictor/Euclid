vec3 tangent_normal_from_normal_map = ;

vec3 world_normal =;
vec3 world_tangent =;
vec3 world_bitangent =;

// TBN_world converts vectors from tangent space to world space
mat3 TBN_world = mat3(world_normal, world_tangent, world_bitangent);

vec3 world_normal_from_normal_map = TBN * tangent_normal_from_normal_map;

// lighting calculation can than be performed in world space

-------------------------------------------------------------------------------

// lighting in tangent space

// vertex shader

// 1. we need a space from which we convert vectors to tangent space
// we use eye space, so that precision issues don't occur in large environments

layout (location = 0) in vec3 position;
layout (location = 1) in vec3 normal;
layout (location = 2) in vec2 texCoords;
layout (location = 3) in vec3 tangent;
layout (location = 4) in vec3 bitangent;



uniform vec3 light_direction_world;
uniform vec3 camera_position_world;

uniform mat4 transform;
uniform mat4 model_view;
uniform mat4 model;
uniform mat4 view;
uniform mat4 view_inverse;
uniform mat3 normal_matrix;  // mat3(transpose(inverse(model)))


//export variables to fragment shader:
out VS_OUT {

  mat3 TBN_world_directions; // used to transform the reflection vector from tangent to world space. 
                          //  This matrix mustn't be used with positions!!!
  vec3 view_direction_tangent; // the view direction in tangent space
  vec3 light_direction_tangent; // the light direction in tangent space
} vs_out;



gl_Position = transform * vec4(position, 1.0f);

vec3 eye_normal = normal_matrix * normal;
vec3 eye_tangent = model * tangent; // only normal is allowed to be multiplied by normal_matrix!
vec3 eye_bitangent = cross(eye_normal, eye_tangent);

// create TBN matrix
// for TBN we can ignore translations (this is only valid for direction vectors and not for positions!!!)
vs_out.TBN_world_directions = mat3(eye_tangent, eye_bitangent, eye_normal);


// create inverse TBN matrix to have a matrix that transforms from eye to tangent space
mat3 TBN_eye_inverse = inverse(vs_out.TBN_world_directions);

//convert all needed vectors to tangent space
// Note: TBN is mat3 since it doesn't have any translation; it is save to use it for positions, too.

vec3 fragment_position_world = (model * vec4(position, 1.0)).rgb;
vec3 view_direction_world = camera_position_world - fragment_position_world;

vs_out.view_direction_tangent = TBN_eye_inverse * view_direction_world;
vs_out.light_direction_tangent = TBN_eye_inverse * light_direction_world;








// fragment shader


// get normal 
float factor = 255/128.0f;
vec3 normal_tangent = (texture(material.normalMap, fs_in.texCoords).xyz * factor) - 1.0;
vec3 view_tangent = fs_in.view_direction_tangent;
vec3 reflect_tangent = reflect(-view_tangent, normal_tangent);
vec3 reflect_world = fs_in.TBN_world_directions * reflect_tangent;

vec3 L = fs_in.light_direction_tangent;
