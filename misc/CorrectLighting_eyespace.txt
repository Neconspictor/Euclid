// lighting in eye space

// vertex shader

// 1. we need a space from which we convert vectors to tangent space
// we use eye space, so that precision issues don't occur in large environments

layout (location = 0) in vec3 position;
layout (location = 1) in vec3 normal;
layout (location = 2) in vec2 texCoords;
layout (location = 3) in vec3 tangent;
layout (location = 4) in vec3 bitangent;



uniform vec3 light_direction_world;
uniform vec3 camera_position_world;

uniform mat4 transform;
uniform mat4 model_view;
uniform mat4 view;
uniform mat4 view_inverse;
uniform mat4 normal_matrix;  // mat3(transpose(inverse(model_view)))


export variables to fragment shader:
out VS_OUT {

  mat3 TBN_eye; // used to transform the tangent normal vector to eye space.
  vec3 fragment_position_eye; // used to calculate the view direction in eye space
  vec3 light_direction_eye; // the light direction in eye space
} vs_out;



gl_Position = transform * vec4(position, 1.0f);

vec3 eye_normal = normal_matrix * normal;
vec3 eye_tangent = model_view * tangent; // only normal is allowed to be multiplied by normal_matrix!
vec3 eye_bitangent = cross(eye_normal, eye_tangent);

// create TBN matrix

vs_out.TBN_eye = mat3(eye_tangent, eye_bitangent, eye_normal);



//convert all needed vectors to eye space
vs_out.fragment_position_eye = vec3(model_view * vec4(position, 1.0));
vs_out.light_direction_eye = vec3(view * vec4(light_direction_world, 1.0)); 








// fragment shader


// get normal 
float factor = 255/128.0f;
vec3 normal_tangent = (texture(material.normalMap, fs_in.texCoords).xyz * factor) - 1.0;
vec3 normal_eye = fs_in.TBN_eye * normal_tangent;
vec3 view_eye = - fs_in.fragment_position_eye;
vec3 reflect_eye = reflect(-view_eye, normal_eye);
vec3 reflect_world = view_inverse * reflect_eye;

vec3 L = fs_in.light_direction_eye;
