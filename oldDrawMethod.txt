	SkyBoxShader* skyBoxShader = dynamic_cast<SkyBoxShader*>
		(renderer->getShaderManager()->getShader(SkyBox));
	PlaygroundShader* playgroundShader = dynamic_cast<PlaygroundShader*>
		(renderer->getShaderManager()->getShader(Playground));
	PhongTextureShader* phongTexShader = dynamic_cast<PhongTextureShader*>
		(renderer->getShaderManager()->getShader(PhongTex));

	PhongShader* phongShader = dynamic_cast<PhongShader*>
		(renderer->getShaderManager()->getShader(Phong));

	LampShader* lampShader = dynamic_cast<LampShader*>
		(renderer->getShaderManager()->getShader(Lamp));

	SimpleReflectionShader* reflectionShader = dynamic_cast<SimpleReflectionShader*>
		(renderer->getShaderManager()->getShader(SimpleReflection));

	NormalsShader* normalsShader = dynamic_cast<NormalsShader*>
		(renderer->getShaderManager()->getShader(Normals));

	ModelDrawer* modelDrawer = renderer->getModelDrawer();

	Renderer::Viewport viewport = window->getViewport();

	camera->calcView();
	mat4 view = camera->getView();
	mat4 projection = perspective(radians(static_cast<float>(camera->getFOV())), (float)viewport.width / (float)viewport.height, 0.1f, 100.0f);
	mat4 viewProj = projection * view;
	mat4 identity;
	mat4 skyBoxView = mat4(mat3(view));

	vec3 lightPosition = vec3{ 12.0f, 10.0f, 20.0f };
	Shader::TransformData data = { &projection, &view, nullptr };

	reflectionShader->setCameraPosition(camera->getPosition());

	//renderer->enableDepthWriting(false);
	//renderer->enableBackfaceDrawing(true);
	//renderer->enableDepthWriting(true);
	//renderer->enableBackfaceDrawing(false);


	phongTexShader->setLightColor({ 1.0f, 1.0f, 1.0f });
	Vob cube(SampleMeshes::CUBE_POSITION_NORMAL_TEX_NAME);
	Vob phongModel(SampleMeshes::CUBE_POSITION_NORMAL_TEX_NAME);
	Vob lampModel(SampleMeshes::CUBE_POSITION_NORMAL_TEX_NAME);
	Vob gunVob("gun.obj");

	cube.setPosition({ 0.0f, 0.0f, 0.0f });
	cube.calcTrafo();

	phongModel.setPosition({ 1.1f, 0.0f, 0.0f });
	phongModel.calcTrafo();
	phongTexShader->setLightPosition(vec3{ 1.1f, 1.0f, 0.0f });

	lampModel.setPosition(lightPosition);
	lampModel.setScale({ 0.5f, 0.5f, 0.5f });
	//lampModel.setEulerXYZ({ 0.0f, 0.0f, radians(45.0f) });
	lampModel.calcTrafo();

	playgroundShader->setTextureMixValue(mixValue);
	data.model = &cube.getTrafo();
	//model = modelManager->getModel(cube.getMeshName());
	//model = modelManager->getModel(gunVob.getMeshName());
	renderer->enableBackfaceDrawing(true);
	//modelDrawer->draw(&gunVob, playgroundShader, data);
	renderer->enableBackfaceDrawing(false);

	data.model = &lampModel.getTrafo();
	//model = modelManager->getModel(lampModel.getMeshName());
	renderer->enableBackfaceDrawing(true);
	//modelDrawer->draw(&lampModel, lampShader, data);
	renderer->enableBackfaceDrawing(false);

	phongTexShader->setLightPosition({0,1,-3});
	phongTexShader->setViewPosition(camera->getPosition());
	phongTexShader->setSpotLightDirection(camera->getLookDirection());
	phongTexShader->setPointLightPositions(pointLightPositions);
	data.model = &phongModel.getTrafo();
	//model = modelManager->getModel("rock/rock.obj");
	Vob rock("rock/rock.obj");

	//model = modelManager->getModel(nanosuitModel.getMeshName());


	phongShader->setLightColor({ 1,1,1 });
	phongShader->setLightPosition({10,10,10});
	phongShader->setMaterial(PhongMaterial({0,0,0,1}, {1,0,0,1}, {1,1,1,1}, 32));

	// the nanosiut uses color information in the alpha channel -> deactivate alpha blending
	renderer->enableAlphaBlending(false);
	modelDrawer->draw(&rock, phongTexShader, data);
	renderer->enableAlphaBlending(true);
	//modelDrawer->draw(*model, reflectionShader, data);

	data.model = &gunVob.getTrafo();
	//modelDrawer->draw(*model, reflectionShader, data);
	//modelDrawer->drawOutlined(*model, phongShader, data, vec4(0.7f, 0.0f, 0.0f, 1.0f));
	//modelDrawer->draw(*model, phongTexShader, data);

	normalsShader->setNormalColor({1,1,0,1});
	data.model = &gunVob.getTrafo();
	//modelDrawer->draw(*model, normalsShader, data);


	// draw sky as last object
	renderer->enableBackfaceDrawing(true);
	data.model = &identity;
	data.view = &skyBoxView;
	modelDrawer->draw(&skyBox, skyBoxShader, data);
	renderer->enableBackfaceDrawing(false);
	renderer->endScene();